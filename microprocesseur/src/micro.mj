const word_size = 32
const instr_size = 27
const addr_size = 32

fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

prepare_add_sous<n>(a:[n], is_sub) = (o:[n]) where
  if n = 0 then
    o = [];
  else
    o0 = a[0] xor is_sub;
    on1 = prepare_add_sous<n-1>(a[1..], is_sub);
    o = o0 . on1;
  end if
end where

add_sous_tmp<n>(a:[n], b:[n], is_sub) = (o:[n], overflow) where
  if n = 0 then
    o = [];
    overflow = is_sub;
  else
    (s_1, c1) = fulladder(a[0], b[0], is_sub);
    (s_n1, overflow) = add_sous_tmp<n-1>(a[1..], b[1..], c1);
    o = s_1 . s_n1;
  end if
end where

add_sous<n>(a:[n], b:[n], is_sub) = (o:[n], overflow) where
  a_new = prepare_add_sous<n>(a, is_sub);
  (o, overflow) = add_sous_tmp<n>(a_new, b, is_sub);
end where

is_equal0<n>(i:[n]) = (o) where
  if n = 0 then
    o = 1;
  else
    tmp = is_equal0<n-1>(i[1..]);
    o = tmp and (not i[0]);
  end if
end where

is_equal<n>(a:[n], b:[n]) = (o) where
  if n = 0 then
    o = 1;
  else
    tmp = is_equal<n-1>(a[1..], b[1..]);
    tmp2 = a[0] xor b[0];
    o = tmp and (not tmp2);
  end if
end where

my_and<n>(a:[n], b:[n]) = (o:[n]) where
  if n = 0 then
    o = [];
  else
    s_n1 = my_and<n-1>(a[1..], b[1..]);
    s_n = a[0] and b[0];
    o = s_n . s_n1
  end if
end where

my_not<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = [];
  else
    s_n1 = my_not<n-1>(a[1..]);
    s_n = not a[0];
    o = s_n . s_n1
  end if
end where

my_lse<n>(a:[n]) = (o:[n], overflow) where (* Multiplication par deux *)
  o = 0 . a[0..(n-2)];
  overflow = a[n-1];
end where

my_rse<n>(a:[n]) = (o:[n]) where (* Division par deux *)
  o = a[1..] . 0;
end where

my_reg<n>(r:[n]) = (o:[n]) where
  if n = 0 then
    o = [];
  else
    o_n1 = my_reg<n-1>(r[1..]);
    o_n = reg(r[0]);
    o = o_n . o_n1
  end if
end where

mux_tab<n>(c, s0:[n], s1:[n]) = (o:[n]) where
  if n = 0 then
    o = [];
  else
    o_n1 = mux_tab<n-1>(c, s0[1..], s1[1..]);
    o_0 = mux(c, s0[0], s1[0]);
    o = o_0 . o_n1;
  end if
end where


choose_reg<n>(R1:[n], R2:[n], R3:[n], R4:[n], R5:[n], R6:[n], R7:[n], R8:[n], R9:[n], 
              R10:[n], R11:[n], R12:[n], R13:[n], R14:[n], R15:[n], R16:[n], R17:[n], R18:[n], R19:[n],
              R20:[n], R21:[n], R22:[n], R23:[n], R24:[n], R25:[n], R26:[n], R27:[n], R28:[n], R29:[n],
              R30:[n], R31:[n], R32:[n], choose_bit:[6]) = (o:[n]) where
  (* Premier étage *)
  R_2_1 = mux_tab<n>(choose_bit[0], R1, R2);
  R_2_2 = mux_tab<n>(choose_bit[0], R3, R4);
  R_2_3 = mux_tab<n>(choose_bit[0], R5, R6);
  R_2_4 = mux_tab<n>(choose_bit[0], R7, R8);
  R_2_5 = mux_tab<n>(choose_bit[0], R9, R10);
  R_2_6 = mux_tab<n>(choose_bit[0], R11, R12);
  R_2_7 = mux_tab<n>(choose_bit[0], R13, R14);
  R_2_8 = mux_tab<n>(choose_bit[0], R15, R16);
  R_2_9 = mux_tab<n>(choose_bit[0], R17, R18);
  R_2_10 = mux_tab<n>(choose_bit[0], R19, R20);
  R_2_11 = mux_tab<n>(choose_bit[0], R21, R22);
  R_2_12 = mux_tab<n>(choose_bit[0], R23, R24);
  R_2_13 = mux_tab<n>(choose_bit[0], R25, R26);
  R_2_14 = mux_tab<n>(choose_bit[0], R27, R28);
  R_2_15 = mux_tab<n>(choose_bit[0], R29, R30);
  R_2_16 = mux_tab<n>(choose_bit[0], R31, R32);
  
  (* Deuxième étage *)
  R_3_1 = mux_tab<n>(choose_bit[1], R_2_1, R_2_2);
  R_3_2 = mux_tab<n>(choose_bit[1], R_2_3, R_2_4);
  R_3_3 = mux_tab<n>(choose_bit[1], R_2_5, R_2_6);
  R_3_4 = mux_tab<n>(choose_bit[1], R_2_7, R_2_8);
  R_3_5 = mux_tab<n>(choose_bit[1], R_2_9, R_2_10);
  R_3_6 = mux_tab<n>(choose_bit[1], R_2_11, R_2_12);
  R_3_7 = mux_tab<n>(choose_bit[1], R_2_13, R_2_14);
  R_3_8 = mux_tab<n>(choose_bit[1], R_2_15, R_2_16);
  
  (* Troisième étage *)
  R_4_1 = mux_tab<n>(choose_bit[2], R_3_1, R_3_2);
  R_4_2 = mux_tab<n>(choose_bit[2], R_3_3, R_3_4);
  R_4_3 = mux_tab<n>(choose_bit[2], R_3_5, R_3_6);
  R_4_4 = mux_tab<n>(choose_bit[2], R_3_7, R_3_8);
  
  (* Quatrième étage *)
  R_5_1 = mux_tab<n>(choose_bit[3], R_4_1, R_4_2);
  R_5_2 = mux_tab<n>(choose_bit[3], R_4_3, R_4_4);
  
  (* Quatrième étage *)
  o = mux_tab<n>(choose_bit[4], R_5_1, R_5_2);
end where

make_64bit<n>(nb:[16]) = (o:[n]) where
  if n - 16 = 0 then
    o = nb;
  else
    o_n1 = make_64bit<n-1>(nb);
    o = o_n1 . o_n1[n-2];
  end if
end where

update_reg<n>(code_reg:[6], code_update:[6], old_val:[n], update_val:[n]) = (o:[n]) where
  update_bit = is_equal<6>(code_reg, code_update);
  o = mux_tab<n>(update_bit, old_val, update_val);
end where

update_PC<n>(code_reg:[6], code_update:[6], old_val:[n], update_val:[n]) = (o:[n]) where
  update_bit = is_equal<6>(code_reg, code_update);
  o = mux_tab<n>(update_bit, old_val, update_val);
end where

update_OVERFLOW<n>(old_val:[n], overflow) = (o:[n]) where
  o = overflow . old_val[1..];
end where

update_FLAG<n>(old_val:[n], calc:[n]) = (o:[n]) where
  tmp = calc[n-1];
  tmp2 = is_equal0<n>(calc);
  o = tmp2 . tmp . ((not tmp) xor tmp2) . old_val[3..];
end where


main() = () where
  (* Chargement des registres *)
  
  (* R32 *)
  PC_1 = reg(PC_new_1);
  PC_2 = reg(PC_new_2);
  PC_3 = reg(PC_new_3);
  PC_4 = reg(PC_new_4);
  PC_5 = reg(PC_new_5);
  PC_6 = reg(PC_new_6);
  PC_7 = reg(PC_new_7);
  PC_8 = reg(PC_new_8);
  PC_9 = reg(PC_new_9);
  PC_10 = reg(PC_new_10);
  PC_11 = reg(PC_new_11);
  PC_12 = reg(PC_new_12);
  PC_13 = reg(PC_new_13);
  PC_14 = reg(PC_new_14);
  PC_15 = reg(PC_new_15);
  PC_16 = reg(PC_new_16);
  PC_17 = reg(PC_new_17);
  PC_18 = reg(PC_new_18);
  PC_19 = reg(PC_new_19);
  PC_20 = reg(PC_new_20);
  PC_21 = reg(PC_new_21);
  PC_22 = reg(PC_new_22);
  PC_23 = reg(PC_new_23);
  PC_24 = reg(PC_new_24);
  PC_25 = reg(PC_new_25);
  PC_26 = reg(PC_new_26);
  PC_27 = reg(PC_new_27);
  PC_28 = reg(PC_new_28);
  PC_29 = reg(PC_new_29);
  PC_30 = reg(PC_new_30);
  PC_31 = reg(PC_new_31);
  PC_32 = reg(PC_new_32);
  
  PC = PC_1.PC_2.PC_3.PC_4.PC_5.PC_6.PC_7.PC_8.PC_9.PC_10.PC_11.PC_12.PC_13.PC_14.PC_15.PC_16.PC_17.PC_18.PC_19.PC_20.PC_21.PC_22.PC_23.PC_24.PC_25.PC_26.PC_27.PC_28.PC_29.PC_30.PC_31.PC_32;
  
  
  
  
  
  FLAG = my_reg<word_size>(FLAG_new); (* R31 *)
  OVERFLOW = my_reg<word_size>(OVERFLOW_new); (* R30 *)
  R29 = my_reg<word_size>(R29_new);
  R28 = my_reg<word_size>(R28_new);
  R27 = my_reg<word_size>(R27_new);
  R26 = my_reg<word_size>(R26_new);
  R25 = my_reg<word_size>(R25_new);
  R24 = my_reg<word_size>(R24_new);
  R23 = my_reg<word_size>(R23_new);
  R22 = my_reg<word_size>(R22_new);
  R21 = my_reg<word_size>(R21_new);
  R20 = my_reg<word_size>(R20_new);
  R19 = my_reg<word_size>(R19_new);
  R18 = my_reg<word_size>(R18_new);
  R17 = my_reg<word_size>(R17_new);
  R16 = my_reg<word_size>(R16_new);
  R15 = my_reg<word_size>(R15_new);
  R14 = my_reg<word_size>(R14_new);
  R13 = my_reg<word_size>(R13_new);
  R12 = my_reg<word_size>(R12_new);
  R11 = my_reg<word_size>(R11_new);
  R10 = my_reg<word_size>(R10_new);
  R9 = my_reg<word_size>(R9_new);
  R8 = my_reg<word_size>(R8_new);
  R7 = my_reg<word_size>(R7_new);
  R6 = my_reg<word_size>(R6_new);
  R5 = my_reg<word_size>(R5_new);
  R4 = my_reg<word_size>(R4_new);
  R3 = my_reg<word_size>(R3_new);
  R2 = my_reg<word_size>(R2_new);
  R1 = my_reg<word_size>(R1_new);
  
(*  un = 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.[];*) (* Utile, nous pour avoir 1 en 64 bits et pour les valeurs non specifiees ! *)
  
  un = 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.[];
  (* un = 1.0.0.0.[];*)
  
  instruction = rom<addr_size, instr_size>(PC);
  
  (* Les différentes parties de l'instruction *)
  code_instruction = instruction[0..3];
  code_immediate = instruction[4];
  code_reg1 = instruction[5..10];
  code_reg2 = instruction[11..16];
  code_immediate_nb = instruction[5..20];
  code_immediate_reg2 = instruction[21..26];
  
  code_reg2_final = mux_tab<6>(code_immediate, code_reg2, code_immediate_reg2);
  
  (* Selection des registre *)
  reg1_val = choose_reg<word_size>(R1, R2, R3, R4, R5, R6, R7, R8, R9,
                    R10, R11, R12, R13, R14, R15, R16, R17, R18, R19,
                    R20, R21, R22, R23, R24, R25, R26, R27, R28, R29,
                    OVERFLOW, FLAG, PC, code_reg1);
  
  mem_reg1 = ram<addr_size , word_size>(reg1_val, 0, un, un);
  
  reg1 = mux_tab<word_size>(code_reg1[5], reg1_val, mem_reg1);
  
  reg2 = choose_reg<word_size>(R1, R2, R3, R4, R5, R6, R7, R8, R9,
                    R10, R11, R12, R13, R14, R15, R16, R17, R18, R19,
                    R20, R21, R22, R23, R24, R25, R26, R27, R28, R29,
                    OVERFLOW, FLAG, PC, code_reg2_final);
  
  mem_reg2 = ram<addr_size , word_size>(reg2, code_reg2_final[5], reg2, res);
  
  immediate_nb = make_64bit<word_size>(code_immediate_nb);
  
  reg1_final = mux_tab<word_size>(code_immediate, reg1, immediate_nb);
  reg2_final = mux_tab<word_size>(code_reg2_final[5], reg2, mem_reg2);
  
  (* Calcul Processeur *)
  (* Le dernier bit du code de add et sous défini l'opération *)
  (res_add_sous, overflow_add_sous) = add_sous<word_size>(reg1_final, reg2_final, code_instruction[3]);
  
  res_and = my_and<word_size>(reg1, reg2);
  res_not = my_not<word_size>(reg1);
  
  (res_lse, overflow_lse) = my_lse<word_size>(reg1);
  res_rse = my_rse<word_size>(reg1);
  
  res_move = reg1_final;
  
  (res_jump, overflow_jump) = add_sous<word_size>(reg1_final, PC, 0);
  
  (* Selection immediate *)
  
  (PC_incr, overflow_PC_incr) = add_sous<word_size>(un, PC, 0);
  
  res_eqz = mux_tab<word_size>(FLAG[0], PC_incr, res_jump);
  res_mtz = mux_tab<word_size>(FLAG[2], PC_incr, res_jump);
  
  (* Decodage de l'instruction *)
  
  res_1_1 = mux_tab<word_size>(code_instruction[0], res_add_sous, res_move);
  res_1_2 = mux_tab<word_size>(code_instruction[0], res_and, res_not);
  res_1_3 = mux_tab<word_size>(code_instruction[0], res_lse, res_rse);
  res_1_4 = mux_tab<word_size>(code_instruction[0], res_eqz, res_mtz);
  
  res_2_1 = mux_tab<word_size>(code_instruction[1], res_1_1, res_1_2);
  res_2_2 = mux_tab<word_size>(code_instruction[1], res_1_3, res_1_4);
  
  res = mux_tab<word_size>(code_instruction[2], res_2_1, res_2_2);
  
  overflow = mux(code_instruction[2], overflow_add_sous, overflow_lse);
  
  (* Mise a jour de tout les registres *)
  (* On suppose qu'on ne peut toucher directement au FLAG et à l'OVERFLOW *)
  PC_new = update_PC<word_size>(1.1.1.1.1.0.[], code_reg2_final, PC_incr, res);

  PC_new_1 = PC_new[0];
  PC_new_2 = PC_new[1];
  PC_new_3 = PC_new[2];
  PC_new_4 = PC_new[3];
  PC_new_5 = PC_new[4];
  PC_new_6 = PC_new[5];
  PC_new_7 = PC_new[6];
  PC_new_8 = PC_new[7];
  PC_new_9 = PC_new[8];
  PC_new_10 = PC_new[9];
  PC_new_11 = PC_new[10];
  PC_new_12 = PC_new[11];
  PC_new_13 = PC_new[12];
  PC_new_14 = PC_new[13];
  PC_new_15 = PC_new[14];
  PC_new_16 = PC_new[15];
  PC_new_17 = PC_new[16];
  PC_new_18 = PC_new[17];
  PC_new_19 = PC_new[18];
  PC_new_20 = PC_new[19];
  PC_new_21 = PC_new[20];
  PC_new_22 = PC_new[21];
  PC_new_23 = PC_new[22];
  PC_new_24 = PC_new[23];
  PC_new_25 = PC_new[24];
  PC_new_26 = PC_new[25];
  PC_new_27 = PC_new[26];
  PC_new_28 = PC_new[27];
  PC_new_29 = PC_new[28];
  PC_new_30 = PC_new[29];
  PC_new_31 = PC_new[30];
  PC_new_32 = PC_new[31];
  
  
  FLAG_new = update_FLAG<word_size>(FLAG, res);
  OVERFLOW_new = update_OVERFLOW<word_size>(OVERFLOW, overflow);
  R29_new = update_reg<word_size>(0.0.1.1.1.0.[], code_reg2_final, R29, res);
  R28_new = update_reg<word_size>(1.1.0.1.1.0.[], code_reg2_final, R28, res);
  R27_new = update_reg<word_size>(0.1.0.1.1.0.[], code_reg2_final, R27, res);
  R26_new = update_reg<word_size>(1.0.0.1.1.0.[], code_reg2_final, R26, res);
  R25_new = update_reg<word_size>(0.0.0.1.1.0.[], code_reg2_final, R25, res);
  R24_new = update_reg<word_size>(1.1.1.0.1.0.[], code_reg2_final, R24, res);
  R23_new = update_reg<word_size>(0.1.1.0.1.0.[], code_reg2_final, R23, res);
  R22_new = update_reg<word_size>(1.0.1.0.1.0.[], code_reg2_final, R22, res);
  R21_new = update_reg<word_size>(0.0.1.0.1.0.[], code_reg2_final, R21, res);
  R20_new = update_reg<word_size>(1.1.0.0.1.0.[], code_reg2_final, R20, res);
  R19_new = update_reg<word_size>(0.1.0.0.1.0.[], code_reg2_final, R19, res);
  R18_new = update_reg<word_size>(1.0.0.0.1.0.[], code_reg2_final, R18, res);
  R17_new = update_reg<word_size>(0.0.0.0.1.0.[], code_reg2_final, R17, res);
  R16_new = update_reg<word_size>(1.1.1.1.0.0.[], code_reg2_final, R16, res);
  R15_new = update_reg<word_size>(0.1.1.1.0.0.[], code_reg2_final, R15, res);
  R14_new = update_reg<word_size>(1.0.1.1.0.0.[], code_reg2_final, R14, res);
  R13_new = update_reg<word_size>(0.0.1.1.0.0.[], code_reg2_final, R13, res);
  R12_new = update_reg<word_size>(1.1.0.1.0.0.[], code_reg2_final, R12, res);
  R11_new = update_reg<word_size>(0.1.0.1.0.0.[], code_reg2_final, R11, res);
  R10_new = update_reg<word_size>(1.0.0.1.0.0.[], code_reg2_final, R10, res);
  R9_new = update_reg<word_size>(0.0.0.1.0.0.[], code_reg2_final, R9, res);
  R8_new = update_reg<word_size>(1.1.1.0.0.0.[], code_reg2_final, R8, res);
  R7_new = update_reg<word_size>(0.1.1.0.0.0.[], code_reg2_final, R7, res);
  R6_new = update_reg<word_size>(1.0.1.0.0.0.[], code_reg2_final, R6, res);
  R5_new = update_reg<word_size>(0.0.1.0.0.0.[], code_reg2_final, R5, res);
  R4_new = update_reg<word_size>(1.1.0.0.0.0.[], code_reg2_final, R4, res);
  R3_new = update_reg<word_size>(0.1.0.0.0.0.[], code_reg2_final, R3, res);
  R2_new = update_reg<word_size>(1.0.0.0.0.0.[], code_reg2_final, R2, res);
  R1_new = update_reg<word_size>(0.0.0.0.0.0.[], code_reg2_final, R1, res);
  
end where












































